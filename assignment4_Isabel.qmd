---
title: "Assignment 4"
author: "Isabel Shaheen O'Malley"
format: pdf
editor: visual
---

Include the GitHub link for the repository containing these files.

<https://github.com/isabelshaheen/assignment-4.git>

Install and load packages

```{r}
if(!require(bit)) install.packages("bit")
if(!require(bigrquery)) install.packages("bigrquery")

 
#| include: false 
library(bit)
library(tidyverse)
library(DBI)
library(dbplyr)
library(bigrquery)
```

In this notebook we will use Google BigQuery, "Google's fully managed, petabyte scale, low cost analytics data warehouse". Some instruction on how to connect to Google BigQuery can be found here: <https://db.rstudio.com/databases/big-query/>.

You will need to set up a Google account with a project to be able to use this service. We will be using a public dataset that comes with 1 TB/mo of free processing on Google BigQuery. As long as you do not repeat the work in this notebook constantly, you should be fine with just the free tier.

Go to <https://console.cloud.google.com> and make sure you are logged in a non-university Google account. **This may not work on a university G Suite account because of restrictions on those accounts.** Create a new project by navigating to the dropdown menu at the top (it might say "Select a project") and selecting "New Project" in the window that pops up. Name it something useful.

After you have initialized a project, paste your project ID into the following chunk.

```{r}
project <- "assignment-4-403119"
```

We will connect to a public database, the Chicago crime database, which has data on crime in Chicago.

```{r}
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bigquery-public-data",
  dataset = "chicago_crime",
  billing = project
)
con
```

List some information about our connection setup

```{r}
dbGetInfo(con)

```

We can look at the available tables in this database using `dbListTables`.

**Note**: When you run this code, you will be sent to a browser and have to give Google permissions to Tidyverse API Packages. **Make sure you select all to give access or else your code will not run.**

```{r}
dbListTables(con)
```

Information on the \`crime\` table can be found here:

<https://cloud.google.com/bigquery/public-data/chicago-crime-data>

## Use code chunks with {sql connection = con} in order to write SQL code within the document.

**Write a first query that counts the number of rows of the \`crime\` table in the year 2016.**

```{sql connection = con}

SELECT COUNT (*) AS n_rows
FROM crime
WHERE year = 2016
LIMIT 10
```

Next, count the number of arrests grouped by `primary_type` in 2016. Note that is a somewhat similar task as above, with some adjustments on which rows should be considered. Sort the results, i.e. list the number of arrests in a descending order.

```{sql connection = con}

SELECT 
  primary_type, 
  COUNTIF(year = 2016) AS arrests_2016,
FROM crime
WHERE 
arrest = TRUE 
AND year IN (2016)
GROUP BY primary_type
ORDER BY count(*) DESC
LIMIT 50;

```

We can also use the `date` for grouping. Count the number of arrests grouped by hour of the day in 2016. You can extract the latter information from `date` via `EXTRACT(HOUR FROM date)`. Which time of the day is associated with the most arrests?

```{sql connection = con}

SELECT 
  count(*) AS arrest_number,
  EXTRACT(HOUR FROM date) AS hour
FROM crime
WHERE arrest = TRUE
  AND year = 2016
GROUP BY hour
ORDER BY arrest_number DESC
LIMIT 50;

```

Focus only on `HOMICIDE` and count the number of arrests for this incident type, grouped by year. List the results in descending order.

```{sql connection = con}

SELECT
  year,
  COUNTIF(primary_type = "HOMICIDE") AS homicide_arrests,
FROM crime
WHERE 
  primary_type = "HOMICIDE"
  AND arrest = TRUE
GROUP BY year
ORDER BY COUNTIF(primary_type = "HOMICIDE") DESC
LIMIT 20;
  
```

Find out which districts have the highest numbers of arrests in 2015 and 2016. That is, count the number of arrests in 2015 and 2016, grouped by year and district. List the results in descending order.

```{sql connection = con}

SELECT 
  district,
  COUNTIF(year = 2015) AS arrests_2015,
  COUNTIF(year = 2016) AS arrests_2016
FROM crime
WHERE arrest = TRUE
GROUP BY district
ORDER BY arrests_2015 DESC
LIMIT 50;

```

## Writing queries from within R via the DBI package

Lets switch to writing queries from within R via the `DBI` package.

Create a query object that counts the number of arrests grouped by `primary_type` of district 11 in year 2016. The results should be displayed in descending order. Execute the query.

```{r}

sql <- "SELECT primary_type, COUNTIF(arrest = TRUE) AS arrests
        FROM `crime`
        WHERE district = 11 AND year = 2016 
        GROUP BY primary_type
        ORDER BY arrests DESC
        LIMIT 100"
```

```{r}

dbGetQuery(con, sql)
```

Try to write the very same query, now using the `dbplyr` package.

**For this, you need to first map the `crime` table to a tibble object in R.**

```{r}

cri <- tbl(con, "crime")
```

-   Start with the original crime table. Use LIMIT 100 to ensure the results object is manageable.

```{r, eval = FALSE}

sql <- "SELECT *
        FROM `crime`
        LIMIT 100"

dbGetQuery(con, sql)

# Store the result (100 observations from the crime table) as an object in our workspace 

subtable <- dbGetQuery(con, sql)
str(subtable)
```

-   Try the above *without* limiting to 100 observations

```{r, eval = FALSE}

# Start with the original crime table
sql <- "SELECT *
        FROM `crime`"

dbGetQuery(con, sql)

# Store the result as an object in our workspace using teh assignment operator

crime_tibble <- dbGetQuery(con, sql)
```

Again, count the number of arrests grouped by `primary_type` of district 11 in year 2016, now using `dplyr` syntax.

```{r}

crime_tibble %>%
  filter(year == 2016 & district == 11) %>%
  group_by(primary_type) %>%
  summarise(arrest_count = n()) %>% 
  arrange(desc(arrest_count))

```

Count the number of arrests grouped by `primary_type` and `year`, still only for district 11. Arrange the result by `year`.

```{r}

crime_tibble %>%
  filter(district == 11) %>%
  group_by(primary_type, year) %>%
  summarise(arrest_count = n()) %>%
  arrange(desc(year))
  
```

Assign the results of the query above to a local R object.

```{r}

table1 <- crime_tibble %>%
  filter(district == 11) %>%
  group_by(primary_type, year) %>%
  summarise(arrest_count = n()) %>%
  arrange(desc(year))

```

Confirm that you pulled the data to the local environment by displaying the first ten rows of the saved data set.

```{r}

head(table1, 10)
```

Close the connection.

```{r}
dbDisconnect(con)
```
